pragma solidity ^0.4.24;

import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
import 'zeppelin-solidity/contracts/math/SafeMath.sol';

contract Odds is Ownable {
  using SafeMath for uint256;

  uint256 public consecutiveWins;
  uint256 public numWins;
  uint256 public lastHash;
  uint256 public winMultiplier;
  uint256 private factor = 578960446186580977117854925043439539266349923328202820197;

  event ForwardETH(address indexed owner, uint256 indexed amount);

  /// @dev Deploy contract and set initial values to zero
  constructor()
    public
  {
    consecutiveWins = 0;
    numWins = 0;
    winMultiplier = 2;
  }

  // @dev Flip a coin. A winner gets 2x their contribution.
  // @param _guess The player's guess
  function flip(bool _guess)
    public
    payable
    returns (bool)
  {
    uint256 betValue = msg.value;
    require(betValue.mul(winMultiplier) <= address(this).balance);
    uint256 blockValue = uint256(blockhash(block.number-1));

    if (lastHash == blockValue) {
      revert();
    }

    lastHash = blockValue;
    uint256 coinFlip = blockValue / factor;
    bool side = coinFlip == 1 ? true : false;

    if (side == _guess) {
      consecutiveWins++;
      numWins += 1;
      msg.sender.transfer(betValue.mul(winMultiplier));
      return true;
    } else {
      consecutiveWins = 0;
      numWins -= 1;
      return false;
    }
  }

  // Allows the owner to withdraw funds from the contract at any time
  function withdrawFunds()
    public
    onlyOwner
  {
    owner.transfer(msg.value);
    emit ForwardETH(msg.sender, msg.value);
  }
}
